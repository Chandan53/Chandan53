# -*- coding: utf-8 -*-
"""PythonCodes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aycVgprVFbjqQYTBjOEMd0ORg5__r8Dg

# Basic Programs
"""

# 1. Python program to add two numbers
print(1 + 2)

# 2. Maximum of two numbers in Python
def find_maximum(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2

number1 = float(input("Enter the first number: "))
number2 = float(input("Enter the second number: "))

maximum_number = find_maximum(number1, number2)
print(f"The maximum of {number1} and {number2} is: {maximum_number}")

# 3. Python Program for factorial of a number
def factorial(n):
    if n < 0:
        return "Factorial is not defined for negative numbers."

    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

# Example usage:
number = int(input("Enter a number to find its factorial: "))

result = factorial(number)
print(f"The factorial of {number} is: {result}")

# 4.	Python Program for simple interest
def calculate_simple_interest(principal, rate, time):
    simple_interest = (principal * rate * time) / 100
    return simple_interest

principal_amount = float(input("Enter the principal amount: "))
interest_rate = float(input("Enter the interest rate (in percentage): "))
time_period = float(input("Enter the time period (in years): "))

simple_interest_result = calculate_simple_interest(principal_amount, interest_rate, time_period)

print(f"The simple interest for principal ${principal_amount}, interest rate {interest_rate}%, and time {time_period} years is: ${simple_interest_result}")

# 5.	Python Program for compound interest

def calculate_compound_interest(principal, rate, time, compounding_frequency):
    n = compounding_frequency
    compound_interest = principal * (1 + rate / (n * 100))**(n * time) - principal
    return compound_interest

principal_amount = float(input("Enter the principal amount: "))
interest_rate = float(input("Enter the interest rate (in percentage): "))
time_period = float(input("Enter the time period (in years): "))
compounding_frequency = int(input("Enter the compounding frequency per year: "))

compound_interest_result = calculate_compound_interest(principal_amount, interest_rate, time_period, compounding_frequency)

print(f"The compound interest for principal ${principal_amount}, interest rate {interest_rate}%, time {time_period} years, and compounding frequency {compounding_frequency} times per year is: ${compound_interest_result}")

# 6.	Python Program to check Armstrong Number
def is_armstrong_number(number):
    num_str = str(number)
    num_digits = len(num_str)

    armstrong_sum = sum(int(digit) ** num_digits for digit in num_str)

    return armstrong_sum == number

input_number = int(input("Enter a number to check if it's an Armstrong number: "))

if is_armstrong_number(input_number):
    print(f"{input_number} is an Armstrong number.")
else:
    print(f"{input_number} is not an Armstrong number.")

# 7.	Python Program for Program to find area of a circle
import math

def calculate_circle_area(radius):
    area = math.pi * radius**2
    return area

# Example usage:
radius = float(input("Enter the radius of the circle: "))

circle_area = calculate_circle_area(radius)

print(f"The area of the circle with radius {radius} is: {circle_area}")

# 8.	Python program to print all Prime numbers in an Interval
def is_prime(num):
    if num < 2:
        return False
    for i in range(2, int(num**0.5) + 1):
        if num % i == 0:
            return False
    return True

def print_primes_in_interval(start, end):
    print(f"Prime numbers in the interval [{start}, {end}]:")
    for number in range(start, end + 1):
        if is_prime(number):
            print(number)

start_interval = int(input("Enter the start of the interval: "))
end_interval = int(input("Enter the end of the interval: "))

print_primes_in_interval(start_interval, end_interval)

# 9.	Python program to check whether a number is Prime or not
def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

num = int(input("Enter a number: "))

if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")

# 10.	Python Program for n-th Fibonacci number
def fibonacci(n):
    fib = [0] * (n + 1)
    fib[1] = 1

    for i in range(2, n + 1):
        fib[i] = fib[i - 1] + fib[i - 2]

    return fib[n]

n = int(input("Enter the value of n: "))

if n < 0:
    print("Please enter a non-negative integer.")
else:
    result = fibonacci(n)
    print(f"The {n}-th Fibonacci number is: {result}")

# 11.	Python Program for How to check if a given number is Fibonacci number?
import math

def is_perfect_square(num):
    sqrt_num = int(math.sqrt(num))
    return sqrt_num * sqrt_num == num

def is_fibonacci(number):
    if number < 0:
        return False

    return is_perfect_square(5 * number * number + 4) or is_perfect_square(5 * number * number - 4)

num = int(input("Enter a number: "))

if is_fibonacci(num):
    print(f"{num} is a Fibonacci number.")
else:
    print(f"{num} is not a Fibonacci number.")

# 12.	Python Program for n\â€™th multiple of a number in Fibonacci Series
def fibonacci_multiple(n, multiple_of):
    fib = [0, 1]

    while len(fib) < n:
        next_fib = fib[-1] + fib[-2]
        fib.append(next_fib)

        if next_fib % multiple_of == 0:
            n -= 1

    return fib[-1]

n = int(input("Enter the value of n: "))
multiple_of = int(input("Enter the number to find its multiple in Fibonacci series: "))

if n <= 0 or multiple_of <= 0:
    print("Please enter positive integers for n and the number.")
else:
    result = fibonacci_multiple(n, multiple_of)
    print(f"The {n}-th multiple of {multiple_of} in the Fibonacci series is: {result}")

# 13.	Program to print ASCII Value of a character
char = input("Enter a character: ")

if len(char) == 1:
    ascii_value = ord(char)
    print(f"The ASCII value of '{char}' is: {ascii_value}")
else:
    print("Please enter a single character.")

# 14.	Python Program for Sum of squares of first n natural numbers
def sum_of_squares(n):
    return (n * (n + 1) * (2 * n + 1)) // 6

n = int(input("Enter the value of n: "))

if n < 1:
    print("Please enter a positive integer.")
else:
    result = sum_of_squares(n)
    print(f"The sum of the squares of the first {n} natural numbers is: {result}")

# 15.	Python Program for cube sum of first n natural numbers
def cube_sum(n):
    return sum(i**3 for i in range(1, n + 1))

n = int(input("Enter the value of n: "))

if n < 1:
    print("Please enter a positive integer.")
else:
    result = cube_sum(n)
    print(f"The cube sum of the first {n} natural numbers is: {result}")

"""# Array Programs:"""

# 1.	Python Program to find sum of array
def sum_of_array(arr):
    return sum(arr)

arr = list(map(int, input("Enter the array elements separated by space: ").split()))

result = sum_of_array(arr)
print(f"The sum of the array is: {result}")

# 2.	Python Program to find largest element in an array
def find_largest_element(arr):
    if not arr:
        return None
    else:
        return max(arr)

arr = list(map(int, input("Enter the array elements separated by space: ").split()))

result = find_largest_element(arr)

if result is not None:
    print(f"The largest element in the array is: {result}")
else:
    print("The array is empty.")

# 3.	Python Program for array rotation
def left_rotate_array(arr, k):
    n = len(arr)
    rotated_array = arr[k:] + arr[:k]
    return rotated_array

arr = list(map(int, input("Enter the array elements separated by space: ").split()))
k = int(input("Enter the number of positions to rotate left: "))

rotated_result = left_rotate_array(arr, k)
print(f"The array after left rotation is: {rotated_result}")

# 4.	Python Program for Reversal algorithm for array rotation

def reverse_array(arr, start, end):
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1

def rotate_array(arr, k):
    n = len(arr)
    k = k % n

    reverse_array(arr, 0, k - 1)

    reverse_array(arr, k, n - 1)

    reverse_array(arr, 0, n - 1)

arr = list(map(int, input("Enter the array elements separated by space: ").split()))
k = int(input("Enter the number of positions to rotate left: "))

rotate_array(arr, k)
print(f"The array after rotation is: {arr}")

# 5.	Python Program to Split the array and add the first part to the end

def split_and_add(arr, k):
    n = len(arr)
    k = k % n

    first_part = arr[:k]
    second_part = arr[k:]

    result = second_part + first_part
    return result

arr = list(map(int, input("Enter the array elements separated by space: ").split()))
k = int(input("Enter the number of positions to split and add to the end: "))

result = split_and_add(arr, k)
print(f"The array after splitting and adding is: {result}")

# 6.	Python Program for Find reminder of array multiplication divided by n
def array_multiplication_remainder(arr, n):
    product = 1
    for num in arr:
        product *= num
    return product % n

result = array_multiplication_remainder([1, 2, 3, 4, 5], 7)
print("Reminder of array multiplication:", result)

# 7.	Python Program to check if given array is Monotonic
def is_monotonic(arr):
    increasing = decreasing = True

    for i in range(1, len(arr)):
        if arr[i] > arr[i - 1]:
            decreasing = False
        elif arr[i] < arr[i - 1]:
            increasing = False

    return increasing or decreasing

result = is_monotonic([1, 2, 3, 2])
print("Is the array monotonic:", result)

"""# List Programs"""

# 1.	Python program to interchange first and last elements in a list
def interchange_first_last(lst):
    lst[0], lst[-1] = lst[-1], lst[0]
    return lst

result = interchange_first_last([1, 2, 3, 4, 5])
print("List after interchanging first and last elements:", result)

# 2.	Python program to swap two elements in a list
def swap_elements(lst, pos1, pos2):
    lst[pos1], lst[pos2] = lst[pos2], lst[pos1]
    return lst

result = swap_elements([1, 2, 3, 4, 5], 1, 3)
print("List after swapping elements:", result)

# 3.	Python | Ways to find length of list
def find_length_of_list(lst):
    return len(lst)

result = find_length_of_list([1, 2, 3, 4, 5])
print("Length of the list:", result)

# 4.	Python | Ways to check if element exists in list
def element_exists_in_list(lst, element):
    return element in lst

result = element_exists_in_list([1, 2, 3, 4, 5], 3)
print("Does element exist in the list:", result)

# 5.	Different ways to clear a list in Python
def clear_list(lst):
    lst.clear()
    return lst

result = clear_list([1, 2, 3, 4, 5])
print("List after clearing:", result)

# 6.	Python | Reversing a List
def reverse_list(lst):
    return lst[::-1]
result = reverse_list([1, 2, 3, 4, 5])
print("Reversed list:", result)

# 7.	Python program to find sum of elements in list
def sum_of_elements(lst):
    return sum(lst)

result = sum_of_elements([1, 2, 3, 4, 5])
print("Sum of elements in the list:", result)

# 8.	Python | Multiply all numbers in the list
def multiply_all_numbers(lst):
    result = 1
    for num in lst:
        result *= num
    return result

result = multiply_all_numbers([1, 2, 3, 4, 5])
print("Product of all numbers in the list:", result)

# 9.	Python program to find smallest number in a list
def find_smallest_number(lst):
    return min(lst)

result = find_smallest_number([5, 2, 8, 1, 4])
print("Smallest number in the list:", result)

# 10.	Python program to find largest number in a list
def find_largest_number(lst):
    return max(lst)

result = find_largest_number([5, 2, 8, 1, 4])
print("Largest number in the list:", result)

# 11.	Python program to find second largest number in a list
def find_second_largest(lst):
    unique_sorted = sorted(set(lst), reverse=True)
    return unique_sorted[1] if len(unique_sorted) > 1 else None

result = find_second_largest([5, 2, 8, 1, 4])
print("Second largest number in the list:", result)

# 12.	Python program to find N largest elements from a list
def find_n_largest_elements(lst, n):
    return sorted(lst, reverse=True)[:n]

result = find_n_largest_elements([5, 2, 8, 1, 4], 3)
print("3 largest elements in the list:", result)

# 13.	Python program to print even numbers in a list
def print_even_numbers(lst):
    return [num for num in lst if num % 2 == 0]


result = print_even_numbers([1, 2, 3, 4, 5])
print("Even numbers in the list:", result)

# 14.	Python program to print odd numbers in a List
def print_odd_numbers(lst):
    return [num for num in lst if num % 2 != 0]

result = print_odd_numbers([1, 2, 3, 4, 5])
print("Odd numbers in the list:", result)

# 15.	Python program to print all even numbers in a range
def print_even_numbers_in_range(start, end):
    return [num for num in range(start, end + 1) if num % 2 == 0]

result = print_even_numbers_in_range(1, 10)
print("Even numbers in the range:", result)

# 17.	Python program to print positive numbers in a list
def print_positive_numbers(lst):
    return [num for num in lst if num > 0]

result = print_positive_numbers([-1, 2, -3, 4, -5])
print("Positive numbers in the list:", result)

# 18.	Python program to print negative numbers in a list
def print_negative_numbers(lst):
    return [num for num in lst if num < 0]

result = print_negative_numbers([-1, 2, -3, 4, -5])
print("Negative numbers in the list:", result)

# 19.	Python program to print all positive numbers in a range
def print_positive_numbers_in_range(start, end):
    positive_numbers = [num for num in range(start, end + 1) if num > 0]
    return positive_numbers

start_value = -5
end_value = 5
result = print_positive_numbers_in_range(start_value, end_value)
print(f"All positive numbers in the range {start_value} to {end_value}:", result)

# 20.	Python program to print all negative numbers in a range
def print_negative_numbers_in_range(start, end):
    negative_numbers = [num for num in range(start, end + 1) if num < 0]
    return negative_numbers

start_value = -5
end_value = 5
result = print_negative_numbers_in_range(start_value, end_value)
print(f"All negative numbers in the range {start_value} to {end_value}:", result)

# 21.	Remove multiple elements from a list in Python
def remove_multiple_elements(lst, elements_to_remove):
    return [ele for ele in lst if ele not in elements_to_remove]

result = remove_multiple_elements([1, 2, 3, 4, 5], [2, 4])
print("List after removing multiple elements:", result)

# 22.	Python â€“ Remove empty List from List
def remove_empty_lists(lst):
    return [sublist for sublist in lst if sublist]

result = remove_empty_lists([[1, 2], [], [3, 4], []])
print("List after removing empty lists:", result)

# 23.	Python | Cloning or Copying a list
def clone_list(lst):
    return lst.copy()  # Alternatively: return lst[:]

original_list = [1, 2, 3, 4, 5]
cloned_list = clone_list(original_list)
print("Cloned list:", cloned_list)

# 24.	Python | Count occurrences of an element in a list
def count_occurrences(lst, element):
    return lst.count(element)

result = count_occurrences([1, 2, 3, 2, 4, 2, 5], 2)
print("Occurrences of '2' in the list:", result)

# 25.	Python | Remove empty tuples from a list
def remove_empty_tuples(input_list):
    updated_list = [tpl for tpl in input_list if tpl]
    return updated_list

sample_list = [(1, 2), (), (3, 4), (), (5, 6)]
result = remove_empty_tuples(sample_list)
print("List after removing empty tuples:", result)

# 26.	Python | Program to print duplicates from a list of integers
def print_duplicates(input_list):
    seen = set()
    duplicates = set()

    for num in input_list:
        if num in seen:
            duplicates.add(num)
        else:
            seen.add(num)

    return list(duplicates)

sample_list = [1, 2, 3, 2, 4, 5, 3]
result = print_duplicates(sample_list)
print("Duplicate elements in the list:", result)

# 27.	Python program to find Cumulative sum of a list
def cumulative_sum(input_list):
    cum_sum = [sum(input_list[:i+1]) for i in range(len(input_list))]
    return cum_sum

sample_list = [1, 2, 3, 4, 5]
result = cumulative_sum(sample_list)
print("Cumulative sum of elements in the list:", result)

# 28.	Python | Sum of number digits in List
def sum_of_digits_in_list(input_list):
    sum_digits = [sum(int(digit) for digit in str(num)) for num in input_list]
    return sum_digits

sample_list = [12, 34, 56, 78]
result = sum_of_digits_in_list(sample_list)
print("Sum of digits of numbers in the list:", result)

# 29.	Break a list into chunks of size N in Python
def break_list_into_chunks(lst, chunk_size):
    return [lst[i:i + chunk_size] for i in range(0, len(lst), chunk_size)]


result = break_list_into_chunks([1, 2, 3, 4, 5, 6, 7, 8], 3)
print("List broken into chunks of size 3:", result)

# 30.	Python | Sort the values of first list using second list
def sort_values_using_second_list(list1, list2):
    sorted_list = [val for _, val in sorted(zip(list2, list1))]
    return sorted_list

list1 = ['apple', 'banana', 'orange']
list2 = [3, 1, 2]
result = sort_values_using_second_list(list1, list2)
print("List1 values sorted using List2:", result)

"""# Matrix Programs"""

# 1.	Python program to add two Matrices
def add_matrices(matrix1, matrix2):
    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

result = add_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])
print("Sum of two matrices:", result)

# 2.	Python program to multiply two matrices
def multiply_matrices(matrix1, matrix2):
    result = [[0 for _ in range(len(matrix2[0]))] for _ in range(len(matrix1))]

    for i in range(len(matrix1)):
        for j in range(len(matrix2[0])):
            for k in range(len(matrix2)):
                result[i][j] += matrix1[i][k] * matrix2[k][j]

    return result

result = multiply_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])
print("Product of two matrices:", result)

# 3.	Python program for Matrix Product
def matrix_product(matrix1, matrix2):
    return [[sum(a * b for a, b in zip(row1, col2)) for col2 in zip(*matrix2)] for row1 in matrix1]

result = matrix_product([[1, 2], [3, 4]], [[5, 6], [7, 8]])
print("Matrix product:", result)

# 4.	Adding and Subtracting Matrices in Python
def add_matrices(matrix1, matrix2):
    return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

def subtract_matrices(matrix1, matrix2):
    return [[matrix1[i][j] - matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]

result_add = add_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])
result_subtract = subtract_matrices([[1, 2], [3, 4]], [[5, 6], [7, 8]])
print("Sum of matrices:", result_add)
print("Difference of matrices:", result_subtract)

# 5.	Transpose a matrix in Single line in Python
def transpose_matrix(matrix):
    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]

result = transpose_matrix([[1, 2, 3], [4, 5, 6]])
print("Transposed matrix:", result)

# 6.	Python | Matrix creation of n*n
def create_square_matrix(n):
    return [[0] * n for _ in range(n)]

result = create_square_matrix(3)
print("Square matrix of size 3x3:", result)

# 7.	Python | Get Kth Column of Matrix
def get_kth_column(matrix, k):
    return [row[k] for row in matrix]

result = get_kth_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1)
print("Kth column of matrix:", result)

# 8.	Python â€“ Vertical Concatenation in Matrix
def vertical_concatenation(matrix1, matrix2):
    return matrix1 + matrix2

result = vertical_concatenation([[1, 2], [3, 4]], [[5, 6], [7, 8]])
print("Vertically concatenated matrices:", result)

"""# String Programs"""

# 1.	Python program to check if a string is palindrome or not
def is_palindrome(s):
    return s == s[::-1]

result = is_palindrome("radar")
print("Is the string a palindrome:", result)

# 2.	Python program to check whether the string is Symmetrical or Palindrome
def is_symmetrical_and_palindrome(s):
    return s == s[::-1] and s == s[::-1]


result = is_symmetrical_and_palindrome("level")
print("Is the string symmetrical and palindrome:", result)

# 3.	Reverse words in a given String in Python
def reverse_words(s):
    return ' '.join(word[::-1] for word in s.split())

result = reverse_words("Hello World")
print("String with reversed words:", result)

# 4.	Ways to remove iâ€™th character from string in Python
def remove_ith_character(s, i):
    return s[:i] + s[i+1:]

result = remove_ith_character("Python", 2)
print("String after removing 2nd character:", result)

# 5.	Python | Check if a Substring is Present in a Given String
def is_substring_present(main_string, substring):
    return substring in main_string


result = is_substring_present("Python Programming", "Pro")
print("Is 'Pro' present in the string:", result)

# 6.	Python â€“ Words Frequency in String Shorthands
def words_frequency(s):
    return {word: s.split().count(word) for word in set(s.split())}

result = words_frequency("Python is fun and Python is versatile")
print("Word frequencies in the string:", result)

# 7.	Python â€“ Convert Snake case to Pascal case
def snake_to_pascal_case(s):
    return ''.join(word.capitalize() for word in s.split('_'))

result = snake_to_pascal_case("python_programming_language")
print("Pascal case conversion:", result)

# 8.	Find length of a string in python (4 ways)
# Method 1:
length1 = len("Hello")

# Method 2:
length2 = sum(1 for _ in "Hello")

# Method 3:
length3 = 0
for _ in "Hello":
    length3 += 1

# Method 4:
length4 = 0
while "Hello"[length4:]:
    length4 += 1

print("Length using different methods:", length1, length2, length3, length4)

# 9.	Python program to print even length words in a string
def print_even_length_words(s):
    return [word for word in s.split() if len(word) % 2 == 0]


result = print_even_length_words("Python is an amazing programming language")
print("Even length words in the string:", result)

# 10.	Python program to accept the strings which contains all vowels
def contains_all_vowels(s):
    return all(char in s.lower() for char in 'aeiou')


result = contains_all_vowels("education")
print("Does the string contain all vowels:", result)

# 11.	Python | Count the Number of matching characters in a pair of string
def count_matching_characters(s1, s2):
    return sum(1 for char in set(s1) if char in s2)

# Example usage:
result = count_matching_characters("hello", "world")
print("Number of matching characters:", result)

# 12.	Remove all duplicates from a given string in Python
def remove_duplicates(s):
    return ''.join(char for char in sorted(set(s), key=s.index))

# Example usage:
result = remove_duplicates("programming")
print("String after removing duplicates:", result)

# 13.	Python â€“ Least Frequent Character in String
def least_frequent_character(s):
    return min(set(s), key=s.count)

# Example usage:
result = least_frequent_character("programming")
print("Least frequent character:", result)

# 14.	Python | Maximum frequency character in String
def maximum_frequency_character(s):
    return max(set(s), key=s.count)

# Example usage:
result = maximum_frequency_character("programming")
print("Maximum frequency character:", result)

# 15.	Python | Program to check if a string contains any special character
def contains_special_character(s):
    return any(char.isalnum() for char in s)

# Example usage:
result = contains_special_character("Python@123")
print("Does the string contain special character:", result)

# 16.	Generating random strings until a given string is generated
import random
import string

def generate_random_string(length):
    return ''.join(random.choice(string.ascii_letters) for _ in range(length))

# Example usage:
given_string = "TargetString"
generated_string = generate_random_string(len(given_string))
print("Generated random string:", generated_string)

# 17.	Find words which are greater than given length k
def find_words_greater_than_length(s, k):
    return [word for word in s.split() if len(word) > k]

# Example usage:
result = find_words_greater_than_length("Python is awesome", 4)
print("Words greater than length 4:", result)

# 18.	Python program for removing i-th character from a string
def remove_ith_character(s, i):
    return s[:i] + s[i+1:]

# Example usage:
result = remove_ith_character("Python", 2)
print("String after removing 2nd character:", result)

# 19.	Python program to split and join a string
def split_and_join(s):
    words = s.split()
    joined_string = '-'.join(words)
    return words, joined_string

# Example usage:
result_words, result_joined_string = split_and_join("Python is powerful")
print("Split words:", result_words)
print("Joined string with '-':", result_joined_string)

# 20.	Python | Check if a given string is binary string or not
def is_binary_string(s):
    return all(char in '01' for char in s)

# Example usage:
result = is_binary_string("101001")
print("Is the string a binary string:", result)

# 21.	Python program to find uncommon words from two Strings
def find_uncommon_words(s1, s2):
    set1 = set(s1.split())
    set2 = set(s2.split())
    uncommon_words = set1.symmetric_difference(set2)
    return list(uncommon_words)

# Example usage:
result = find_uncommon_words("Python is powerful", "Java is versatile")
print("Uncommon words between two strings:", result)

# 22.	Python â€“ Replace duplicate Occurrence in String
def replace_duplicate_occurrence(s):
    seen = set()
    result = []
    for char in s:
        if char not in seen:
            seen.add(char)
            result.append(char)
        else:
            result.append('$')  # or any other replacement character
    return ''.join(result)

# Example usage:
result = replace_duplicate_occurrence("programming")
print("String with duplicate occurrence replaced:", result)

# 23.	Python â€“ Replace multiple words with K
def replace_multiple_words(s, words_to_replace, replacement):
    for word in words_to_replace:
        s = s.replace(word, replacement)
    return s

# Example usage:
result = replace_multiple_words("Python is fun and Python is versatile", ['Python', 'is'], 'K')
print("String after replacing multiple words:", result)

# 24.	Python | Permutation of a given string using inbuilt function
from itertools import permutations

def string_permutations(s):
    return [''.join(p) for p in permutations(s)]

# Example usage:
result = string_permutations("abc")
print("Permutations of the string:", result)

# 25.	Python | Check for URL in a String
import re

def contains_url(s):
    url_pattern = re.compile(r'https?://\S+')
    return bool(url_pattern.search(s))

# Example usage:
result = contains_url("Check out this website: https://www.example.com")
print("Does the string contain a URL:", result)

# 26.	Execute a String of Code in Python
def execute_code_string(code_string):
    try:
        exec(code_string)
    except Exception as e:
        return f"Error: {e}"

# Example usage:
code_string = "print('Hello, World!')"
result = execute_code_string(code_string)

# 27.	String slicing in Python to rotate a string
def rotate_string(s, k):
    return s[k:] + s[:k]

# Example usage:
result = rotate_string("Python", 3)
print("Rotated string:", result)

# 28.	String slicing in Python to check if a string can become empty by recursive deletion
def can_become_empty(s, target):
    while s:
        s = s.replace(target, '')
    return not bool(s)

# Example usage:
result = can_become_empty("abccab", "abc")
print("Can the string become empty:", result)

# 29.	Python Counter| Find all duplicate characters in string
from collections import Counter

def find_duplicate_characters(s):
    char_count = Counter(s)
    return [char for char, count in char_count.items() if count > 1]

# Example usage:
result = find_duplicate_characters("programming")
print("Duplicate characters in the string:", result)

# 30.	Python â€“ Replace all occurrences of a substring in a string
def replace_substring(s, old_substring, new_substring):
    return s.replace(old_substring, new_substring)

# Example usage:
result = replace_substring("Python is easy. Python is powerful.", "Python", "Java")
print("String after replacing substring:", result)

"""# Dictionary Programs"""

# 1.	Python â€“ Extract Unique values dictionary values
def extract_unique_values(dictionary):
    return set(value for values in dictionary.values() for value in values)

# Example usage:
sample_dict = {'A': [1, 2, 3], 'B': [2, 4, 6], 'C': [3, 6, 9]}
result = extract_unique_values(sample_dict)
print("Unique values in dictionary:", result)

# 2.	Python program to find the sum of all items in a dictionary
def sum_of_items(dictionary):
    return sum(dictionary.values())

# Example usage:
sample_dict = {'A': 10, 'B': 20, 'C': 30}
result = sum_of_items(sample_dict)
print("Sum of all items in dictionary:", result)

# 3.	Python | Ways to remove a key from dictionary
def remove_key(dictionary, key_to_remove):
    new_dict = {key: value for key, value in dictionary.items() if key != key_to_remove}
    return new_dict

# Example usage:
sample_dict = {'A': 10, 'B': 20, 'C': 30}
key_to_remove = 'B'
result = remove_key(sample_dict, key_to_remove)
print("Dictionary after removing key:", result)

# 4.	Ways to sort list of dictionaries by values in Python â€“ Using itemgetter
from operator import itemgetter

def sort_dict_by_values(dictionary):
    sorted_dict = dict(sorted(dictionary.items(), key=itemgetter(1)))
    return sorted_dict

# Example usage:
sample_dict = {'A': 30, 'B': 10, 'C': 20}
result = sort_dict_by_values(sample_dict)
print("Dictionary sorted by values:", result)

# 5.	Ways to sort list of dictionaries by values in Python â€“ Using lambda function
def sort_dict_by_values_lambda(dictionary):
    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))
    return sorted_dict

# Example usage:
sample_dict = {'A': 30, 'B': 10, 'C': 20}
result = sort_dict_by_values_lambda(sample_dict)
print("Dictionary sorted by values (using lambda):", result)

# 6.	Python | Merging two Dictionaries
def merge_two_dicts(dict1, dict2):
    merged_dict = {**dict1, **dict2}
    return merged_dict

# Example usage:
dict1 = {'A': 10, 'B': 20}
dict2 = {'C': 30, 'D': 40}
result = merge_two_dicts(dict1, dict2)
print("Merged dictionary:", result)

# 7.	Python â€“ Convert key-values list to flat dictionary
def convert_to_flat_dict(key_value_list):
    flat_dict = dict(key_value_list)
    return flat_dict

# Example usage:
key_value_list = [('A', 10), ('B', 20), ('C', 30)]
result = convert_to_flat_dict(key_value_list)
print("Flat dictionary from key-values list:", result)

# 8.	Python â€“ Insertion at the beginning in OrderedDict
from collections import OrderedDict

def insert_at_beginning(od, key, value):
    od.move_to_end(key, last=False)
    od[key] = value
    return od

# Example usage:
ordered_dict = OrderedDict({'A': 10, 'B': 20, 'C': 30})
result = insert_at_beginning(ordered_dict, 'D', 40)
print("OrderedDict after inserting at the beginning:", result)

# 9.	Python | Check order of character in string using OrderedDict( )
from collections import OrderedDict

def check_order(s, pattern):
    od = OrderedDict.fromkeys(s)
    return ''.join(od.keys()).find(pattern) != -1

# Example usage:
result = check_order("Python is amazing", "is")
print("Does the string follow the order:", result)

# 10.	Dictionary and counter in Python to find winner of election
from collections import Counter

def election_winner(votes):
    counter = Counter(votes)
    max_votes = max(counter.values())
    winners = [candidate for candidate, votes in counter.items() if votes == max_votes]
    return winners

# Example usage:
result = election_winner(['A', 'B', 'A', 'C', 'B', 'A'])
print("Winner(s) of the election:", result)

# 11.	Python â€“ Append Dictionary Keys and Values ( In order ) in dictionary
def append_keys_and_values(dict1, dict2):
    result_dict = {}
    for key, value in zip(dict1.keys(), dict2.values()):
        result_dict[key] = value
    return result_dict

# Example usage:
dict1 = {'A': 10, 'B': 20, 'C': 30}
dict2 = {'X': 40, 'Y': 50, 'Z': 60}
result = append_keys_and_values(dict1, dict2)
print("Dictionary after appending keys and values:", result)

# 12.	Python | Sort Python Dictionaries by Key or Value
def sort_dict_by_key(dictionary):
    return dict(sorted(dictionary.items()))

def sort_dict_by_value(dictionary):
    return dict(sorted(dictionary.items(), key=lambda item: item[1]))

# Example usage:
sample_dict = {'B': 20, 'C': 10, 'A': 30}
result_by_key = sort_dict_by_key(sample_dict)
result_by_value = sort_dict_by_value(sample_dict)
print("Dictionary sorted by key:", result_by_key)
print("Dictionary sorted by value:", result_by_value)

# 13.	Python â€“ Sort Dictionary key and values List
def sort_dict_keys_and_values(dictionary):
    sorted_keys = sorted(dictionary.keys())
    sorted_values = [dictionary[key] for key in sorted_keys]
    return sorted_keys, sorted_values

# Example usage:
sample_dict = {'B': 20, 'C': 10, 'A': 30}
result_keys, result_values = sort_dict_keys_and_values(sample_dict)
print("Sorted keys:", result_keys)
print("Corresponding values:", result_values)

# 14.	Handling missing keys in Python dictionaries
def handle_missing_keys(dictionary, key, default_value):
    return dictionary.get(key, default_value)

# Example usage:
sample_dict = {'A': 10, 'B': 20, 'C': 30}
key_to_check = 'D'
result = handle_missing_keys(sample_dict, key_to_check, 0)
print(f"Value for key '{key_to_check}':", result)

# 15.	Python dictionary with keys having multiple inputs
def create_dict_with_multiple_inputs(keys, values):
    return dict(zip(keys, values))

# Example usage:
keys_list = ['Name', 'Age', 'Country']
values_list = ['John', 25, 'USA']
result = create_dict_with_multiple_inputs(keys_list, values_list)
print("Dictionary with multiple inputs:", result)

# 16.	Print anagrams together in Python using List and Dictionary
def group_anagrams(words):
    anagram_dict = {}
    for word in words:
        sorted_word = ''.join(sorted(word))
        anagram_dict.setdefault(sorted_word, []).append(word)
    return list(anagram_dict.values())

# Example usage:
word_list = ['listen', 'silent', 'enlist', 'hello', 'world']
result = group_anagrams(word_list)
print("Anagrams grouped together:", result)

# 17.	Kâ€™th Non-repeating Character in Python using List Comprehension and OrderedDict
from collections import OrderedDict

def kth_non_repeating_character(s, k):
    char_count = OrderedDict.fromkeys(s, 0)
    for char in s:
        char_count[char] += 1
    non_repeating_chars = [char for char, count in char_count.items() if count == 1]
    return non_repeating_chars[k-1] if k <= len(non_repeating_chars) else None

# Example usage:
result = kth_non_repeating_character("programming", 2)
print("2nd non-repeating character:", result)

# 18.	Check if binary representations of two numbers are anagram
def are_binary_anagrams(num1, num2):
    binary_str1 = bin(num1)[2:]
    binary_str2 = bin(num2)[2:]
    return sorted(binary_str1) == sorted(binary_str2)

# Example usage:
result = are_binary_anagrams(9, 6)
print("Are the binary representations anagrams:", result)

# 19.	Python Counter to find the size of largest subset of anagram words
from collections import Counter

def largest_anagram_subset(words):
    anagram_counter = Counter(''.join(sorted(word)) for word in words)
    return max(anagram_counter.values(), default=0)

# Example usage:
word_list = ['listen', 'silent', 'enlist', 'hello', 'world']
result = largest_anagram_subset(word_list)
print("Size of the largest anagram subset:", result)

# 20.	Python | Remove all duplicates words from a given sentence
def remove_duplicate_words(sentence):
    words = sentence.split()
    unique_words = list(set(words))
    return ' '.join(unique_words)

# Example usage:
result = remove_duplicate_words("Python is great and Python is versatile")
print("Sentence after removing duplicate words:", result)

# 21.	Python Dictionary to find mirror characters in a string
def find_mirror_characters(s):
    mirror_dict = {'p': 'q', 'q': 'p', 'b': 'd', 'd': 'b'}
    mirrored_chars = [mirror_dict[char] for char in s[::-1] if char in mirror_dict]
    return ''.join(mirrored_chars)

# Example usage:
result = find_mirror_characters("pqbd")
print("Mirror characters in the string:", result)

# 22.	Counting the frequencies in a list using dictionary in Python
def count_frequencies(input_list):
    frequency_dict = {}
    for item in input_list:
        frequency_dict[item] = frequency_dict.get(item, 0) + 1
    return frequency_dict

# Example usage:
input_list = [1, 2, 2, 3, 1, 4, 2, 5, 3]
result = count_frequencies(input_list)
print("Frequencies in the list:", result)

# 23.	Python | Convert a list of Tuples into Dictionary
def convert_tuples_to_dict(tuple_list):
    result_dict = dict(tuple_list)
    return result_dict

# Example usage:
tuple_list = [('A', 10), ('B', 20), ('C', 30)]
result = convert_tuples_to_dict(tuple_list)
print("Dictionary from list of tuples:", result)

# 24.	Python counter and dictionary intersection example (Make a string using deletion and rearrangement)
from collections import Counter

def can_make_string_from_another(s1, s2):
    counter_s1 = Counter(s1)
    counter_s2 = Counter(s2)
    return all(counter_s2[char] >= count for char, count in counter_s1.items())

# Example usage:
result = can_make_string_from_another("xyz", "xyyyyz")
print("Can make the string using deletion and rearrangement:", result)

# 25.	Python dictionary, set and counter to check if frequencies can become same
from collections import Counter

def can_frequencies_become_same(s):
    char_count = Counter(s)
    values_set = set(char_count.values())
    return len(values_set) == 1 or (len(values_set) == 2 and 1 in values_set)

# Example usage:
result = can_frequencies_become_same("xyyyz")
print("Can frequencies become the same:", result)

# 26.	Scraping And Finding Ordered Words In A Dictionary using Python
def scrape_and_find_ordered_words():
    # Assuming you have a dictionary file
    with open('dictionary.txt', 'r') as file:
        words = [line.strip() for line in file.readlines()]

    ordered_words = [word for word in words if ''.join(sorted(word)) == word]
    return ordered_words

# Example usage:
result = scrape_and_find_ordered_words()
print("Ordered words in the dictionary:", result)

# 27.	Possible Words using given characters in Python
from itertools import permutations

def possible_words_using_characters(chars):
    word_permutations = [''.join(perm) for perm in permutations(chars)]
    return word_permutations

# Example usage:
characters = ['a', 'b', 'c']
result = possible_words_using_characters(characters)
print("Possible words using given characters:", result)

# 28.	Python â€“ Keys associated with Values in Dictionary
def keys_associated_with_values(dictionary, target_value):
    keys_list = [key for key, value in dictionary.items() if value == target_value]
    return keys_list

# Example usage:
sample_dict = {'A': 10, 'B': 20, 'C': 30, 'D': 20}
target_value = 20
result = keys_associated_with_values(sample_dict, target_value)
print(f"Keys associated with value {target_value}:", result)

"""# Tuple Programs"""

# 1.	Python program to Find the size of a Tuple
def tuple_size(tup):
    return len(tup)

my_tuple = (1, 2, 3, 4, 5)
print("Size of the tuple:", tuple_size(my_tuple))

# 2.	Python â€“ Maximum and Minimum K elements in Tuple
def max_min_k_elements(tup, k):
    return (sorted(tup)[:k], sorted(tup, reverse=True)[:k])

my_tuple = (4, 7, 1, 9, 3, 5)
k = 3
print("Maximum and Minimum", k, "elements in the tuple:", max_min_k_elements(my_tuple, k))

# 3.	Create a list of tuples from given list having number and its cube in each tuple
def number_cube_tuples(lst):
    return [(x, x**3) for x in lst]

my_list = [1, 2, 3, 4, 5]
print("List of tuples with number and its cube:", number_cube_tuples(my_list))

# 4.	Python â€“ Adding Tuple to List and vice â€“ versa
my_list = [(1, 2), (3, 4), (5, 6)]
my_tuple = (7, 8)

# Adding tuple to list
my_list.append(my_tuple)
print("List after adding tuple:", my_list)

# Converting list to tuple
my_tuple_list = tuple(my_list)
print("Tuple converted from list:", my_tuple_list)

# 5.	Python â€“ Closest Pair to Kth index element in Tuple
def closest_pair_to_k(tup, k):
    return sorted(tup, key=lambda x: abs(x - tup[k]))[:2]

my_tuple = (1, 3, 5, 7, 9)
k = 2
print("Closest pair to", k, "index element:", closest_pair_to_k(my_tuple, k))

# 6.	Python â€“ Join Tuples if similar initial element
def join_tuples(tuples_list):
    result = []
    temp = ()
    for tup in tuples_list:
        if not temp or temp[0] == tup[0]:
            temp += tup
        else:
            result.append(temp)
            temp = tup
    result.append(temp)
    return result

my_tuples = [(1, 2), (1, 3), (2, 4), (3, 5), (3, 6)]
print("Joined Tuples:", join_tuples(my_tuples))

# 7.	Python â€“ Extract digits from Tuple list
def extract_digits(tup_list):
    return [int(digit) for tup in tup_list for digit in str(tup) if digit.isdigit()]

my_tuples = [(12, 34), (45, 67), (89, 10)]
print("Extracted digits from tuple list:", extract_digits(my_tuples))

# 8.	Python â€“ All pair combinations of 2 tuples
from itertools import product

def tuple_combinations(tup1, tup2):
    return list(product(tup1, tup2))

tuple1 = (1, 2)
tuple2 = (3, 4)
print("All pair combinations of 2 tuples:", tuple_combinations(tuple1, tuple2))

# 9.	Python â€“ Remove Tuples of Length K
def remove_tuples_of_length_k(tup_list, k):
    return [tup for tup in tup_list if len(tup) != k]

my_tuples = [(1, 2), (3, 4, 5), (6,), (7, 8, 9)]
k = 2
print("Tuples after removing length", k, ":", remove_tuples_of_length_k(my_tuples, k))

# 10.	Sort a list of tuples by second Item
my_list = [(2, 5), (1, 3), (4, 7), (3, 2)]
sorted_list = sorted(my_list, key=lambda x: x[1])
print("Sorted list of tuples by second item:", sorted_list)

# 11.	Python program to Order Tuples using external List
my_list = [(1, 'a'), (2, 'b'), (3, 'c')]
order = [2, 0, 1]
ordered_list = [my_list[i] for i in order]
print("Ordered list of tuples using external list:", ordered_list)

# 12.	Python â€“ Flatten tuple of List to tuple
def flatten_tuple_list(tuple_list):
    return tuple(item for sublist in tuple_list for item in sublist)

my_tuple_list = [(1, 2), (3, 4), (5, 6)]
print("Flattened tuple:", flatten_tuple_list(my_tuple_list))

# 13.	Python â€“ Convert Nested Tuple to CustomÂ KeyÂ Dictionary
def nested_tuple_to_dict(nested_tuple):
    return {tup[0]: tup[1] for tup in nested_tuple}

my_nested_tuple = (('a', 1), ('b', 2), ('c', 3))
print("Dictionary from nested tuple:", nested_tuple_to_dict(my_nested_tuple))